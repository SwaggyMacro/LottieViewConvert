name: Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            archive_name: LottieViewConvert.Linux.X64.zip
          - os: ubuntu-latest
            runtime: linux-arm64
            archive_name: LottieViewConvert.Linux.Arm64.zip
          - os: macos-latest
            runtime: osx-x64
            archive_name: LottieViewConvert.MacOS.X64.zip
          - os: macos-latest
            runtime: osx-arm64
            archive_name: LottieViewConvert.MacOS.Arm64.zip
          - os: windows-latest
            runtime: win-x64
            archive_name: LottieViewConvert.Win.X64.zip
    name: Build on ${{ matrix.os }} (${{ matrix.runtime }})
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          include-prerelease: true

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish LottieViewConvert for ${{ matrix.runtime }}
        shell: bash
        run: |
          dotnet publish ./LottieViewConvert/LottieViewConvert.csproj \
            -c Release \
            -f net8.0 \
            -r ${{ matrix.runtime }} \
            --self-contained true \
            -p:UseAppHost=true \
            -p:PublishReadyToRun=true \
            -p:PublishSingleFile=true \
            -o ./artifacts/${{ matrix.runtime }}

      - name: Create archive for ${{ matrix.runtime }}
        shell: bash
        run: |
          cd artifacts/${{ matrix.runtime }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # On Windows, use PowerShell to create zip
            powershell -Command "Compress-Archive -Path * -DestinationPath ../${{ matrix.archive_name }}"
          else
            # On Linux/macOS, use zip command
            zip -r ../${{ matrix.archive_name }} *
          fi

      - name: Upload build artifact (compressed archive)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}-archive
          path: artifacts/${{ matrix.archive_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Archives
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
